"""
Django settings for metabackend project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from copy import deepcopy
import json
import os

from kombu.utils.url import as_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
DATA_DIR = os.path.join(DIR, 'data')
CONFIGURATION_DIR = os.path.join(DIR, 'conf')
STATIC_ROOT = os.path.join(DIR, 'static')


def load_json(path, optional=False):
    if optional and not os.path.exists(path):
        return None
    with open(path) as data_file:
        return json.load(data_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open(os.path.join(CONFIGURATION_DIR, 'secret')) as s:
    SECRET_KEY = s.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '0.0.0.0',
    '84.201.156.149',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',

    'api.apps.ApiConfig',
    'codegen.apps.CodegenConfig',
    'data_storage.apps.DataStorageConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'metabackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'metabackend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DATA_DIR, 'db.sqlite3'),
    }
}

# {
#   "name": "db1",
#   "user": "user1",
#   "password": "password",
#   "host": "localhost",
#   "port": "5432"
# }
POSTGRES_CONFIG = load_json(os.path.join(CONFIGURATION_DIR, 'postgres_config.json'), optional=True)
if POSTGRES_CONFIG:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
    }
    for k, v in POSTGRES_CONFIG.items():
        DATABASES['default'][k.upper()] = v

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname}\t{asctime}\t{module}\t{process:d}\t{thread:d}\t{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# S3 settings

# {
#   "aws_access_key_id": "cMZ-FVjIehcgS4YmXuGI",
#   "aws_secret_access_key": "ut*******"
# }
AWS_CREDENTIALS = load_json(os.path.join(CONFIGURATION_DIR, 'aws_credentials.json'))

# {
#   "bucket": "code-testing",
#   "endpoint_url": "https://storage.yandexcloud.net",
#   "region_name": "ru-central1"
# }
S3_CONFIG = load_json(os.path.join(CONFIGURATION_DIR, 'aws_s3_config.json'))

S3_ENDPOINT = S3_CONFIG.pop('endpoint_url')
S3_BUCKET = S3_CONFIG.pop('bucket')
S3_CREDENTIALS = deepcopy(AWS_CREDENTIALS)
S3_CREDENTIALS['endpoint_url'] = S3_ENDPOINT

# Celery settings

# {
#   "endpoint": "message-queue.api.cloud.yandex.net",
#   "region_name": "ru-central1"
# }
SQS_CONFIG = load_json(os.path.join(CONFIGURATION_DIR, 'aws_sqs_config.json'))

CELERY_BROKER_URL = as_url(
    'sqs',
    host=SQS_CONFIG['host'], port=SQS_CONFIG['port'],
    user=AWS_CREDENTIALS.get('aws_access_key_id'), password=AWS_CREDENTIALS.get('aws_secret_access_key'),
)

CELERY_BROKER_TRANSPORT_OPTIONS = {
    'region': SQS_CONFIG['region_name'],
    'queue_name_prefix': 'celery-',
    'visibility_timeout': 30,
    'is_secure': True,
}

# {
#   "host": "localhost",
#   "port": 6379
# }
# Don't using now
# REDIS_CONFIG = load_json(os.path.join(CONFIGURATION_DIR, 'redis_config.json'))
# CELERY_RESULT_BACKEND = as_url(
#     'redis',
#     host=REDIS_CONFIG['host'], port=REDIS_CONFIG['port'],
#     password=REDIS_CONFIG.get('password')
# )
# CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {
#     'redis_socket_connect_timeout': 0.1,
# }

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# execution-system settings
EXECUTION_SYSTEM_BASE_URL = 'http://localhost:8090'
