{% if model.input.type == 'csv' %}

| import pandas
| import numpy as np
|
| import ng_config

{% macro parse_feature_fun(feature) %}
| def parse_{{feature.name}}(val):
    <
    | {# print(f'debug: value {val} for feature {{feature.name}}') #}
    {% if feature.type == 'enum' %}
        {% for enum_value in feature.enum %}
            | if val == {{repr(enum_value)}}:
                < return {{loop.index0}}
                >
        {% endfor %}
        | raise ValueError(f'invalid value {val} for feature {{feature.name}}')
    {% elif feature.type == 'float' %}
        | return float(val)
    {% elif feature.type == 'integer' %}
        | return int(val)
    {% else %}
        //) that feature is invalid
    {% endif %}
    >
{% endmacro %}

{% set features = model.input.features %}
{% for feature in features %}
    | # parse feature {{feature.name}}
    {{ parse_feature_fun(feature) }}
{% endfor %}
| # parse target {{model.input.target.name}}
{{ parse_feature_fun(model.input.target) }}

| def read_csv(filename, train_mode):
    <
    | df = pandas.read_csv(filename)
    {% macro make_feature(feature) %}
        | feature_{{feature.name}} = map(
            parse_{{feature.name}},
            df[{{repr(feature.name)}}]
        )
    {% endmacro %}
    {% for feature in features %}
        {{ make_feature(feature) }}
    {% endfor %}
    | X = np.array(list(zip(
        {% for feature in features %}
            feature_{{feature.name}},
        {% endfor %}
    )))
    | assert X[0].shape == ng_config.input_shape
    | if not train_mode:
        < return X
        >
    {{ make_feature(model.input.target) }}
    | y = np.array(list(feature_{{model.input.target.name}}))
    | return X, y
    >

| def add_result_column(source_filename, result):
    <
    | assert ng_config.model['output']['target'] == 'csv'
    | i = -1
    | out = ''
    | for line in open(source_filename):
        <
        | line = line.strip()
        | if i == -1:
            < line += ',' + {{repr(model.output.name)}}
        > else:
            < line += ',' + str(result[i])
            >
        | out += line + '\n'
        | i += 1
        >
    | return out
    >

{% endif %}
